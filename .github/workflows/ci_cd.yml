name: CI/CD para Microservicios Modificados     #Nombre del workflow.

on:
  push:                                        # Cualquier push a cualquier rama activará el workflow.
    paths:
      - 'Micros/**'  # Solo se activará para cambios en estos archivos.

jobs:
  detectar-cambios:                             #Primer Job
    runs-on: ubuntu-latest                      #Se ejecutará sobre un compilador Ubuntu
    outputs:                                    #Salidas del Job que pueden ser utilizadas por otros Jobs
      servicios_modificados: ${{ steps.set-modified.outputs.modified_services }}      #Contiene los servicios modificados detectados por set-modified (Establecer servicios modificados)
    steps:
      - name: Checkout del repositorio               #Nombre del paso: Obtener el código fuente del repositorio
        uses: actions/checkout@v2                    #Utiliza la acción checkout@v2 para clonar el repositorio en el runner

      - name: Obtener archivos modificados           #Nombre del paso: Obtener archivos modificados
        id: detect                                   #ID del paso. Se utilizará para referenciar la salida de este paso en otros pasos o jobs
        uses: tj-actions/changed-files@v34.0.2       #Utiliza la acción tj-actions/changed-files@v34.0.2 para detectar archivos modificados
        with:                                        #Sobre los archivos especificados:
          files: |                                   # ** -> Todos los archivos del directorio
            Micros/**      

      - name: Establecer servicios modificados                  #Nombre del paso: Establecer servicios modificados
        id: set-modified                                        #ID del paso. Se utilizará para referenciar la salida de este paso en otros pasos o jobs
        run: |                                                  #Script que se ejecuta en el paso
          modified_services=$(echo "${{ steps.detect.outputs.modified_files }}" | grep -oP '(?<=Micros/)[^/]+' | jq -R -s -c 'split("\n")[:-1]')
          if [ -z "$modified_services" ]; then 
            modified_services="[]" 
          fi
          echo "modified_services=$modified_services" >> $GITHUB_ENV
          echo "::set-output name=modified_services::$modified_services"


  construir-y-desplegar:                          #Nombre del Job
    needs: detectar-cambios                       #Depende del Job detectar-cambios
    if: ${{ needs.detectar-cambios.outputs.servicios_modificados != '[]' }} # Solo se ejecuta si hay servicios modificados
    runs-on: ubuntu-latest                        #Se ejecutará sobre un compilador Ubuntu
    strategy:                                     #Estrategia de ejecución
        matrix:                                   #Ejecución en paralelo para diferentes valores de la matriz
            servicio: ${{ fromJson(needs.detectar-cambios.outputs.servicios_modificados) }} #Los servicios modificados detectados en el Job "detectar_cambios" pasaran a la matriz
    steps:
        - name: Checkout del repositorio            #Nombre del paso: Obtener el código fuente del repositorio
          uses: actions/checkout@v2                 #Utiliza la acción checkout@v2 para clonar el repositorio en el runner

        - name: Construir y Desplegar               #Nombre del paso: Construir y Desplegar
          run: |                                    #Script que se ejecuta en el paso
                cd Micros/${{ matrix.servicio }}
                ./build-deploy.sh
